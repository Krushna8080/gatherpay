rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles with location
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow location updates with more flexible timestamp validation
      allow update: if request.auth != null && 
        request.auth.uid == userId && (
        // Allow all non-location updates
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['location', 'lastLocationUpdate']) ||
        // Allow location updates with timestamp validation
        (request.resource.data.location is map &&
         request.resource.data.lastLocationUpdate is timestamp &&
         request.resource.data.lastLocationUpdate.toMillis() >= request.time.toMillis() - 300000) // Allow updates within last 5 minutes
      );
    }
    
    // Groups
    match /groups/{groupId} {
      allow read: if request.auth != null;
      
      // Allow group creation
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.status == 'open' &&
        request.resource.data.members is map &&
        request.resource.data.createdAt is timestamp;
      
      // Allow group updates
      allow update: if request.auth != null && (
        // Group leader can update all fields
        resource.data.createdBy == request.auth.uid ||
        // Members can update specific fields
        (resource.data.members[request.auth.uid] == true && 
         !request.resource.data.diff(resource.data).affectedKeys()
           .hasAny(['createdBy', 'createdAt','status']))
      );
      
      // Allow group deletion by creator
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
      
      // Group messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == true;
        
        allow create: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == true &&
          request.resource.data.user._id == request.auth.uid &&
          request.resource.data.createdAt is timestamp;
        
        allow update: if request.auth != null && 
          resource.data.user._id == request.auth.uid &&
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['user._id', 'createdAt']);
        
        // Allow message deletion by creator or group leader
        allow delete: if request.auth != null && (
          resource.data.user._id == request.auth.uid ||
          get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid
        );
      }
    }
    
    // Transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.groupId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups);
      allow create: if request.auth != null;
      allow update, delete: if false; // Transactions should be immutable
    }

    // Disputes
    match /disputes/{disputeId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.defendantId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if false; // Only admin can update disputes
    }
    
    // Ratings
    match /ratings/{ratingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false; // Ratings are immutable
    }
    
    // User Analytics
    match /analytics/users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Only admin/cloud functions can write analytics
    }
    
    // Payment Records
    match /payments/{paymentId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update, delete: if false; // Payment records are immutable
    } 
    
    // Orders
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.groupId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.leaderId == request.auth.uid || 
         resource.data.members[request.auth.uid] == true);
      allow delete: if false;
    }

    // Order Splits
    match /orderSplits/{splitId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.groupId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups);
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if false;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if false; // Only cloud functions should create notifications
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if false;
    }

    // User Reputations
    match /userReputations/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Only cloud functions should update reputation
    }

    // Group Metrics
    match /groupMetrics/{groupId} {
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == true;
      allow write: if false; // Only cloud functions should update metrics
    }
  }
} 